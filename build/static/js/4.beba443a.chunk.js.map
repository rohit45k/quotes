{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.jsx"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","NewQuote","navigate","useNavigate","useHttp","addQuote","sendRequest","status","error","useEffect","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,mGCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,UAC7C,E,yBC4CcC,EA1CG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAarB,OACE,mCACE,cAAC,EAAD,UACE,uBAAMN,UAAWC,IAAQO,KAAMC,SAdrC,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBP,EAAeQ,QAAQC,MACvCC,EAAcR,EAAaM,QAAQC,MAIzCf,EAAMiB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GACjD,EAKK,UACGhB,EAAMoB,WACL,qBAAKnB,UAAWC,IAAQmB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAKrB,UAAWC,IAAQqB,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKrB,OAEtC,sBAAKL,UAAWC,IAAQqB,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKnB,OAEpC,qBAAKP,UAAWC,IAAQ2B,QAAxB,SACE,wBAAQ5B,UAAU,MAAlB,+BAMX,ECnBc6B,UApBE,WACf,IAAMC,EAAWC,cAEjB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAE7BC,qBAAU,WACO,cAAXF,GAA2BC,GAC7BN,EAAS,UAEZ,GAAE,CAACK,EAAQL,EAAUM,IAMtB,OACE,cAAC,EAAD,CAAWjB,UAAsB,YAAXgB,EAAsBnB,WALtB,SAACsB,GACvBJ,EAAYI,EACb,GAKF,C","file":"static/js/4.beba443a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3gNNs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__m_M-O\",\"loading\":\"QuoteForm_loading__1pAWN\",\"control\":\"QuoteForm_control__1qGT5\",\"actions\":\"QuoteForm_actions__15P_q\"};","import classes from \"./Card.module.css\";\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef } from 'react';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  return (\n    <>\n      <Card>\n        <form className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\n\r\nconst NewQuote = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const { sendRequest, status, error } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed' && !error) {\r\n      navigate('/quotes');\r\n    }\r\n  }, [status, navigate, error]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}