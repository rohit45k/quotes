{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","quoteId","commentData","current","value","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","qId","getAllComments","data","addCommentHandler","useCallback","length","onClick"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,2B,qBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,qBCAzBD,EAAOC,QAAU,CAAC,SAAW,+B,qBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,gC,mICSrIC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,QAGf,E,iBCKcC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,GADR,KAKzB,E,iBCwCcC,EA3CQ,SAACV,GACtB,IAAMW,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAmBlB,EAAnBkB,eAERC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,GAEH,GAAE,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAKNP,EAAY,CACVQ,QAASvB,EAAMuB,QACfC,YAAa,CAAEpB,KAAMO,EAAec,QAAQC,QAE/C,EAED,OACE,uBAAMzB,UAAWC,IAAQyB,KAAMC,SAAUR,EAAzC,UACc,YAAXJ,GACC,qBAAKf,UAAU,WAAf,SACE,cAAC4B,EAAA,EAAD,MAGJ,sBAAK5B,UAAWC,IAAQ4B,QAASF,SAAUR,EAA3C,UACE,uBAAOW,QAAQ,UAAf,0BACA,0BAAUtB,GAAG,UAAUuB,KAAK,IAAIC,IAAKtB,OAEvC,qBAAKV,UAAWC,IAAQgC,QAAxB,SACE,wBAAQjC,UAAU,MAAlB,6BAIP,ECoBckC,UA1DE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAGMf,EADSgB,cACQC,IAEvB,EAA6C3B,YAAQ4B,KAAgB,GAA7D1B,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQ0B,EAA7B,EAA6BA,KAAMzB,EAAnC,EAAmCA,MAEnCE,qBAAU,WACRJ,EAAYQ,EACb,GAAE,CAACA,EAASR,IAEb,IAQIP,EAJEmC,EAAoBC,uBAAY,WACpC7B,EAAYQ,EACb,GAAE,CAACA,EAASR,IAwBb,MApBe,YAAXC,IACFR,EACE,qBAAKP,UAAU,WAAf,SACE,cAAC4B,EAAA,EAAD,OAKFZ,IACFT,EAAU,mBAAGP,UAAU,iBAAb,SAA+BgB,KAG5B,cAAXD,GAA4B0B,GAAwB,IAAhBA,EAAKG,SAC3CrC,EAAU,mBAAGP,UAAU,iBAAb,0CAGG,cAAXe,IAA2B0B,GAAQA,EAAKG,OAAS,KACnDrC,EAAU,cAAC,EAAD,CAAcF,SAAUoC,KAIlC,0BAASzC,UAAWC,IAAQI,SAA5B,UACE,gDACE+B,GACA,wBAAQpC,UAAU,MAAM6C,QAlCC,WAC7BR,GAAmB,EACpB,EAgCK,2BAIDD,GACC,cAAC,EAAD,CAAgBd,QAASA,EAASL,eAAgByB,IAEnDnC,IAGN,C","file":"static/js/3.69860f12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1N9-0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2UHPx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2JVDk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1d8I5\",\"loading\":\"NewCommentForm_loading__1ciuv\",\"control\":\"NewCommentForm_control__1XU0h\",\"actions\":\"NewCommentForm_actions__2Goke\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      quoteId: props.quoteId,\n      commentData: { text: commentTextRef.current.value },\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport CommentsList from './CommentsList';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const params = useParams();\n  const quoteId = params.qId;\n\n  const { sendRequest, status, data, error } = useHttp(getAllComments, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comment;\n\n  if (status === 'pending') {\n    comment = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    comment = <p className='centered focus'>{error}</p>;\n  }\n\n  if (status === 'completed' && (!data || data.length === 0)) {\n    comment = <p className='centered focus'>Be the first one to comment</p>;\n  }\n\n  if (status === 'completed' && (data || data.length > 0)) {\n    comment = <CommentsList comments={data} />;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={quoteId} onAddedComment={addCommentHandler} />\n      )}\n      {comment}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"sourceRoot":""}